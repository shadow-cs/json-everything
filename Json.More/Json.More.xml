<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Json.More</name>
    </assembly>
    <members>
        <member name="T:Json.More.EnumStringConverter`1">
             <summary>
             Enum to string converter.
             </summary>
             <typeparam name="T">The supported enum.</typeparam>
             <remarks>
            	This serializer supports the <see cref="T:System.ComponentModel.DescriptionAttribute"/> to indicate custom value naming.
            
             The <see cref="T:System.FlagsAttribute"/> is supported via serializing to an array of base values.  Inclusion
             of composite values is not supported.
             </remarks>
             <example>
             public class MyClass {
            	    [JsonConverter(typeof(EnumStringConverter&lt;MyEnum&gt;))]
            	    public MyEnum Value { get; set; }
             }
             
             public enum MyEnum {
                 Foo,
                 Bar
             }
             </example>
        </member>
        <member name="M:Json.More.EnumStringConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <typeparamref name="T" />.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.Text.Json.JsonException">Element was not a string or could not identify the JSON value as a known enum value.</exception>
        </member>
        <member name="M:Json.More.EnumStringConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.More.JsonDocumentEqualityComparer">
             <summary>
             Calculates equality between two <see cref="T:System.Text.Json.JsonDocument"/>s.
             </summary>
             <remarks>
             This comparison is compliant with the ideals expressed by JSON:
            
             - Objects are unordered.
             - Arrays are ordered.
             </remarks>
        </member>
        <member name="P:Json.More.JsonDocumentEqualityComparer.Instance">
            <summary>
            A singleton instance for convenience.
            </summary>
        </member>
        <member name="M:Json.More.JsonDocumentEqualityComparer.Equals(System.Text.Json.JsonDocument,System.Text.Json.JsonDocument)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Json.More.JsonDocumentEqualityComparer.GetHashCode(System.Text.Json.JsonDocument)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj">obj</paramref> is a reference type and <paramref name="obj">obj</paramref> is null.</exception>
        </member>
        <member name="T:Json.More.JsonDocumentExtensions">
            <summary>
            Provides extension functionality for <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
        </member>
        <member name="M:Json.More.JsonDocumentExtensions.IsEquivalentTo(System.Text.Json.JsonDocument,System.Text.Json.JsonDocument)">
            <summary>
            Determines JSON-compatible equivalence.
            </summary>
            <param name="a">The first document.</param>
            <param name="b">The second document.</param>
            <returns><code>true</code> if the documents are equivalent; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Json.More.JsonDocumentExtensions.ToJsonDocument``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts an object to a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="options">(optional) JSON serialization options.</param>
            <returns>A <see cref="T:System.Text.Json.JsonDocument"/> representing the vale.</returns>
        </member>
        <member name="T:Json.More.JsonElementEqualityComparer">
             <summary>
             Calculates equality between two <see cref="T:System.Text.Json.JsonElement"/>s.
             </summary>
             <remarks>
             This comparison is compliant with the ideals expressed by JSON:
            
             - Objects are unordered.
             - Arrays are ordered.
             </remarks>
        </member>
        <member name="P:Json.More.JsonElementEqualityComparer.Instance">
            <summary>
            A singleton instance for convenience.
            </summary>
        </member>
        <member name="M:Json.More.JsonElementEqualityComparer.Equals(System.Text.Json.JsonElement,System.Text.Json.JsonElement)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Json.More.JsonElementEqualityComparer.GetHashCode(System.Text.Json.JsonElement)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj">obj</paramref> is a reference type and <paramref name="obj">obj</paramref> is null.</exception>
        </member>
        <member name="T:Json.More.JsonElementExtensions">
            <summary>
            Provides extension functionality for <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
        </member>
        <member name="M:Json.More.JsonElementExtensions.IsEquivalentTo(System.Text.Json.JsonElement,System.Text.Json.JsonElement)">
            <summary>
            Determines JSON-compatible equivalence.
            </summary>
            <param name="a">The first element.</param>
            <param name="b">The second element.</param>
            <returns><code>true</code> if the element are equivalent; <code>false</code> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not valid.</exception>
        </member>
        <member name="M:Json.More.JsonElementExtensions.ToJsonString(System.Text.Json.JsonElement)">
            <summary>
            Serializes a <see cref="T:System.Text.Json.JsonElement"/> into a proper JSON string.
            </summary>
            <param name="element">The value to convert.</param>
            <returns>A JSON string.</returns>
            <remarks>
            Booleans don't case right.  See https://github.com/dotnet/runtime/issues/42502
            </remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Int64)">
            <summary>
            Converts a <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Int32)">
            <summary>
            Converts a <see cref="T:System.Int32"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Int16)">
            <summary>
            Converts a <see cref="T:System.Int16"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Decimal)">
            <summary>
            Converts a <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Single)">
            <summary>
            Converts a <see cref="T:System.Single"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Collections.Generic.IEnumerable{System.Text.Json.JsonElement})">
            <summary>
            Converts a <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="values">The array of values to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="M:Json.More.JsonElementExtensions.AsJsonElement(System.Collections.Generic.IDictionary{System.String,System.Text.Json.JsonElement})">
            <summary>
            Converts a <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="values">The value to convert.</param>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representing the value.</returns>
            <remarks>This is a workaround for lack of native support in the System.Text.Json namespace.</remarks>
        </member>
        <member name="T:Json.More.Utf8JsonWriterExtensions">
            <summary>
            Provides extension functionality for <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
        </member>
        <member name="M:Json.More.Utf8JsonWriterExtensions.WriteValue(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonElement)">
            <summary>
            Writes a <see cref="T:System.Text.Json.JsonElement"/> to the stream.
            </summary>
            <param name="writer">The JSON stream writer.</param>
            <param name="element">The element to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not valid.</exception>
        </member>
    </members>
</doc>
